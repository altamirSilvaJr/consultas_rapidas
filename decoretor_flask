import sys
import requests
import time

class CollectorMetrics(object):
    def __init__(self, func):
        self._locals = {}
        self.func = func

    def __call__(self, *args, **kwargs):
        print("====================")
        def tracer(frame, event, arg):
            if event=='return':
                self._locals = frame.f_locals.copy()

        # tracer is activated on next call, return or exception
        sys.setprofile(tracer)
        try:
            # trace the function call
            start=time.time()
            res = self.func(*args, **kwargs)
            latency=time.time() - start
        finally:
            metrics = {}
            #print(self.locals)
            metrics.update({"latency": latency})
            metrics.update({"status": self._locals['status']}) if 'status' in self._locals.keys() else None
            metrics.update({"error_message": self._locals['error_message']}) if 'error_message' in self._locals.keys() else None
            # disable tracer and replace with old one
            self.send_metrics(metrics)
            sys.setprofile(None)
        
        return res

    def clear_locals(self):
        self._locals = {}
    
    def send_metrics(self, data):
        req = requests.post("http://127.0.0.1:5000/teste", json=data)

    @property
    def locals(self):
        return self._locals
